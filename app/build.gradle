/*
 * MIT License
 *
 * Copyright (c) 2022 Ã€ngel Mariages
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

plugins {
    alias libs.plugins.android.application
    alias libs.plugins.kotlinAndroid
    alias libs.plugins.ksp
    alias libs.plugins.firebaseCrashlytics
    alias libs.plugins.googleServices
}

android {
    def isReleaseBuild = project.gradle.startParameter.taskNames.any { it.toLowerCase().contains('release') }

    def versionPropsFile = file('version.properties')

    if (!versionPropsFile.canRead()) {
        throw new GradleException("Could not read version.properties!")
    }

    Properties versionProps = new Properties()

    versionProps.load(new FileInputStream(versionPropsFile))

    def versionMajor = versionProps['MAJOR'].toInteger()
    def versionMinor = versionProps['MINOR'].toInteger()
    def versionPatch = versionProps['PATCH'].toInteger()

    if (isReleaseBuild) {
        versionPatch += 1

        if (versionPatch == 100) {
            versionPatch = 0
            versionMinor += 1
        }
        if (versionMinor == 10) {
            versionMinor = 0
            versionMajor += 1
        }

        versionProps['MAJOR'] = versionMajor.toString()
        versionProps['MINOR'] = versionMinor.toString()
        versionProps['PATCH'] = versionPatch.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    }

    compileSdk 34

    defaultConfig {
        applicationId "org.angelmariages.rodalieswidget"
        minSdkVersion 24
        targetSdkVersion 33
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
            shrinkResources true
        }

        debug {
            debuggable true
            minifyEnabled false
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    namespace 'org.angelmariages.rodalieswidget'
    buildFeatures {
        viewBinding true
        buildConfig true
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Kotlin
    implementation libs.kotlin.stdlib
    implementation libs.kotlinx.coroutines.android

    implementation libs.material

    implementation libs.core
    implementation libs.gson

    implementation libs.harmony

    // OkHttp3
    implementation libs.okhttp

    implementation libs.androidx.work.runtime.ktx
    implementation libs.androidx.vectordrawable
    implementation libs.androidx.core.ktx
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx

    // Import the BoM for the Firebase platform
    implementation platform(libs.firebase.bom)
    implementation libs.firebase.analytics
    implementation libs.firebase.crashlytics

    // Moshi
    implementation libs.moshi.kotlin
    ksp libs.moshi.ksp

    // Tests
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation libs.androidx.core.testing
    androidTestImplementation libs.androidx.runner

    // UiAutomator Testing
    androidTestImplementation libs.androidx.uiautomator
}

